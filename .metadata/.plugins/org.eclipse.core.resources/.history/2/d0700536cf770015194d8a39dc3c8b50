import java.math.BigInteger;
import java.util.HashSet;
import java.util.Set;


public class Helpers {

	public static BigInteger findInverse(BigInteger a, BigInteger b) {
		
		BigInteger temp = BigInteger.ZERO;
		BigInteger a0 = a;
		BigInteger b0 = b;
		BigInteger t0 = BigInteger.ZERO;
		BigInteger t = BigInteger.ONE;
		BigInteger s0 = BigInteger.ONE;
		BigInteger s = BigInteger.ZERO;

		BigInteger q = a0.divide(b0);
		BigInteger temp2 = q.multiply(b);
		BigInteger r = a0.subtract(temp2);

		while (r.compareTo(BigInteger.ZERO) == 1) {
			temp = t0.subtract(q.multiply(t));
			t0 = t;
			t = temp;
			temp = s0.subtract(q.multiply(s));
			s0 = s;
			s = temp;
			a0 = b0;
			b0 = r;
			q = a0.divide(b0);
			r = a0.subtract(q.multiply(b0));
		}

		return s;
	}
	
	private static BigInteger sqrt(BigInteger n) {
		  BigInteger a = BigInteger.ONE;
		  BigInteger b = new BigInteger(n.shiftRight(5).add(new BigInteger("8")).toString());
		  while(b.compareTo(a) >= 0) {
		    BigInteger mid = new BigInteger(a.add(b).shiftRight(1).toString());
		    if(mid.multiply(mid).compareTo(n) > 0) 
		    	b = mid.subtract(BigInteger.ONE);
		    else 
		    	a = mid.add(BigInteger.ONE);
		  }
		  return a.subtract(BigInteger.ONE);
		}
	
	public Set<BigInteger> fermat(BigInteger n){
		BigInteger a = sqrt(n);
		a = a.add(BigInteger.ONE);//Ceiling Function??
		BigInteger aSquared = a.multiply(a);
		
		BigInteger bSquared = aSquared.subtract(n);

		
		while(!isSquare(bSquared)){
            a=a.add(BigInteger.ONE);
            bSquared = a.multiply(a).subtract(n);
		}
		
		

		BigInteger root1,root2;
		root1 = a.subtract(sqrt(bSquared));
		root2 = n.divide(root1);
		Set<BigInteger> set = new HashSet<BigInteger>();
		set.add(root1);
		set.add(root2);
		
		return set;
	}
	
    public boolean isSquare(BigInteger N)
    {
        BigInteger sqr = sqrt(N);
        BigInteger plus = sqr.add(BigInteger.ONE);
        if (( sqr.multiply(sqr) == N) || plus.multiply(plus) == N  )     {
            return true;
        }
        return false;
    }
	
}
